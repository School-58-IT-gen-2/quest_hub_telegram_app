TRANSLATIONS = {
    "type": "–¢–∏–ø",
    "damage": "–£—Ä–æ–Ω",
    "damage_type": "–¢–∏–ø —É—Ä–æ–Ω–∞",
    "properties": "–°–≤–æ–π—Å—Ç–≤–∞",
    "weight": "–í–µ—Å",
    "cost": "–¶–µ–Ω–∞",
    "ac_base": "–ë–∞–∑–æ–≤–∞—è –∑–∞—â–∏—Ç–∞ (AC)",
    "dex_bonus": "–ë–æ–Ω—É—Å –õ–æ–≤–∫–æ—Å—Ç–∏",
    "max_dex_bonus": "–ú–∞–∫—Å. –±–æ–Ω—É—Å –õ–æ–≤–∫–æ—Å—Ç–∏",
    "stealth_disadvantage": "–ü–æ–º–µ—Ö–∞ —Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç–∏",
    "weapons": "–û—Ä—É–∂–∏–µ",
    "armor": "–ë—Ä–æ–Ω—è",
    "name": "–ò–º—è",
    "surname": "–§–∞–º–∏–ª–∏—è",
    "race": "–†–∞—Å–∞",
    "character_class": "–ö–ª–∞—Å—Å",
    "lvl": "–£—Ä–æ–≤–µ–Ω—å",
    "hp": "–•–∏—Ç—ã",
    "speed": "–°–∫–æ—Ä–æ—Å—Ç—å",
    "worldview": "–ú–∏—Ä–æ–≤–æ–∑–∑—Ä–µ–Ω–∏–µ",
    "initiative": "–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞",
    "inspiration": "–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ",
    "stats": "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏",
    "stat_modifiers": "–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫",
    "skills": "–ù–∞–≤—ã–∫–∏",
    "traits_and_abilities": "–ß–µ—Ä—Ç—ã –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏",
    "inventory": "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å",
    "languages": "–Ø–∑—ã–∫–∏",
    "backstory": "–ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è",
    "range": "–î–∞–ª—å–Ω–æ—Å—Ç—å",
    "duration": "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
    "components": "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã",
    "description": "–û–ø–∏—Å–∞–Ω–∏–µ",
    "casting_time": "–í—Ä–µ–º—è –Ω–∞–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è",
}

def translate_key(key: str) -> str:
    """
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π.

    Args:
        key (str): –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º.

    Returns:
        str: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º.
    """
    return TRANSLATIONS.get(key, key)

def translate_stat(stat: str) -> str:
    """
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π.
    
    Args:
        stat (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º.

    Returns:
        str: –ù–∞–∑–≤–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º.
    """
    stat_translations = {
        'strength': '–°–∏–ª–∞',
        'dexterity': '–õ–æ–≤–∫–æ—Å—Ç—å',
        'constitution': '–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å',
        'intelligence': '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç',
        'wisdom': '–ú—É–¥—Ä–æ—Å—Ç—å',
        'charisma': '–•–∞—Ä–∏–∑–º–∞'
    }
    return stat_translations.get(stat, stat.capitalize())

def tg_text_convert(text: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram.
    
    Args:
        text (str): –¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å.

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
    """
    restricted_symbols = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for i in restricted_symbols:
        text = text.replace(i, '\\' + i)
    return text

def align_text(text: list, offset: int) -> str:
    """
    –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤ 2 —Å—Ç–æ–ª–±—Ü–∞.

    Args:
        text (str): –°–ø–∏—Å–æ–∫ –∏–∑ 2 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (—Ç–µ–∫—Å—Ç –≤ –¥–≤—É—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö).
        offset (int): –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –Ω–∞—á–∞–ª–æ–º –ø–µ—Ä–≤–æ–≥–æ –∏ –≤—Ç–æ—Ä–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –≤ —Å–∏–º–≤–æ–ª–∞—Ö.

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
    """
    if len(str(text[1])) <= 20:
        return f"{text[0]}:" + ' ' * (offset - len(text[0])) + str(text[1])
    right_column = str(text[1]).split()
    right_row = ''
    right_rows = []
    if len(str(text[1])) > 20:
        i = 0
        while i < len(right_column):
            while len(right_row + right_column[i]) < 20:
                right_row += f' {right_column[i]}'
                i += 1
                if i == len(right_column):
                    break
            right_rows.append(right_row)
            right_row = ''
    result_string = f"{text[0]}:" + ' ' * (offset - len(text[0]) - 1) + right_rows[0]
    for i in range(1, len(right_rows)):
        result_string += '\n' + ' ' * offset + right_rows[i]
    return result_string

def format_ammunition(data: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—ã–≤–æ–¥ –∞–º—É–Ω–∏—Ü–∏–∏ –∏ –±—Ä–æ–Ω–∏.
    
    Args:
        data (dict): –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
    
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∞–º—É–Ω–∏—Ü–∏–µ–π –∏ –±—Ä–æ–Ω–µ–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
    """
    card = f"*_–ê–º—É–Ω–∏—Ü–∏—è:_*\n```–ê–º—É–Ω–∏—Ü–∏—è\n"
    weapons_and_equipment = data["weapons_and_equipment"]
    for weapon in weapons_and_equipment:
        card += f'{dict(weapon).pop("name")}\n'
        for key, value in weapon.items():
            if key == "dex_bonus":
                value = "–î–∞" if value else "–ù–µ—Ç"
            elif key == "stealth_disadvantage":
                value = "–î–∞" if value else "–ù–µ—Ç"
            elif key == 'weight':
                value = int(value)
                last_digit = value % 10
                if last_digit == 0 or last_digit >= 5 or (value % 100) in range(11, 19):
                    value = f'{value} —Ñ—É–Ω—Ç–æ–≤'
                elif last_digit == 1:
                    value = f'{value} —Ñ—É–Ω—Ç'
                else:
                    value = f'{value} —Ñ—É–Ω—Ç–∞'
            elif key == 'cost':
                value = int(value)
                last_digit = value % 10
                if last_digit == 0 or last_digit >= 5 or (value % 100) in range(11, 19):
                    value = f'{value} –∑–æ–ª–æ—Ç—ã—Ö'
                elif last_digit == 1:
                    value = f'{value} –∑–æ–ª–æ—Ç–æ–π'
                else:
                    value = f'{value} –∑–æ–ª–æ—Ç—ã—Ö'
            if isinstance(value, list):
                value = ", ".join(value)
            card += align_text([translate_key(key), value], 22) + "\n"
        card += "\n"
    card += "```"
    return card

def format_spells(data: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—ã–≤–æ–¥ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π.
    
    Args:
        data (dict): –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
    
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
    """
    card = ""
    spells = data["spells"]
    if spells:
        card += f"*_–ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è:_*\n```–ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è\n"
        for name, details in spells.items():
            card += f"{name}:\n"
            for key, value in details.items():
                if key == 'description':
                    description = value
                else:
                    card += align_text([translate_key(key), value], 22) + "\n"
            card += description
            card += "\n\n"
        card += "```"
    else:
        card += '*_–ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è:_*\n\n–£ –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ—Ç –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π\.'
    return card

def character_card(data: dict) -> dict:
    """
    –°–æ–∑–¥–∞–µ—Ç –ª–∏—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ —Å–ª–æ–≤–∞—Ä—é —Å –¥–∞–Ω–Ω—ã–º–∏.
    
    Args:
        data (dict): –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
    
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
    """
    age = data.get('age', '–ù–µ —É–∫–∞–∑–∞–Ω')
    last_digit = age % 10
    if last_digit == 0 or last_digit >= 5 or (age % 100) in range(11, 19):
        age = f'*_{age} –ª–µ—Ç_*'
    elif last_digit == 1:
        age = f'*_{age} –≥–æ–¥_*'
    else:
        age = f'*_{age} –≥–æ–¥–∞_*'

    card = (
        f'*_\U00002E3A {data.get('name', '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π')} {data.get('surname', '')} \U00002E3A_*\n\n'
        "üë§ *_–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:_*\n"
        "```–ü–∞—Ä–∞–º–µ—Ç—Ä—ã\n"
        f"{align_text(['–í–æ–∑—Ä–∞—Å—Ç', age[2:-2]], 22)}\n"
        f"{align_text(['–†–∞—Å–∞', data.get('subrace', '–ù–µ —É–∫–∞–∑–∞–Ω–∞') if data.get('subrace', '–ù–µ —É–∫–∞–∑–∞–Ω–∞') else data.get('race', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')], 22)}\n"
        f"{align_text(['–ö–ª–∞—Å—Å', data.get('character_class', '–ù–µ —É–∫–∞–∑–∞–Ω')], 22)}\n"
        f"{align_text(['–£—Ä–æ–≤–µ–Ω—å', 1 if data.get('lvl', '–ù–µ —É–∫–∞–∑–∞–Ω') == None else data.get('lvl', '–ù–µ —É–∫–∞–∑–∞–Ω')], 22)}\n"
        f"{align_text(['–•–∏—Ç—ã', data.get('hp', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')], 22)}\n"
        f"{align_text(['–ü–∞—Å—Å–∏–≤–Ω–æ–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ', data.get('passive_perception', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')], 22)}\n"
        f"{align_text(['–°–∫–æ—Ä–æ—Å—Ç—å', data.get('speed', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')], 22)} —Ñ—É—Ç–æ–≤\n"
        f"{align_text(['–ú–∏—Ä–æ–≤–æ–∑–∑—Ä–µ–Ω–∏–µ', data.get('worldview', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')], 22)}\n"
        f"{align_text(['–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞', data.get('initiative', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')], 22)}\n"
        f"{align_text(['–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ', '–î–∞' if data.get('inspiration', False) else '–ù–µ—Ç'], 22)}"
        "```\n\n"
    )

    if 'stats' in data:
        stats = data['stats']
        modifiers = data['stat_modifiers']
        card += "üìä  *_–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:_*\n```–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏\n"
        stat_arr = []
        for i in range(len(stats)):
            stat = list(stats.keys())[i]
            value = list(stats.values())[i]
            modifier = list(modifiers.values())[i]
            if modifier >= 0:
                modifier = "+" + str(modifier)
            modifier = str(modifier)
            stat_arr.append(align_text([translate_stat(stat), f'({value})'], 22) + ' ' * (4 - len(str(value))) + modifier)
        card += "\n".join(stat_arr) + "```"

    if 'skills' in data:
        skills = data['skills']
        card += "\n\nüõ†Ô∏è *_–ù–∞–≤—ã–∫–∏:_*\n"
        card += "\n".join(f">\U00002022 {skill}" for skill in skills)

    name = f'*_{data.get('name', '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π')} {data.get('surname', '')}_*'

    backstory = f"üìú *_–ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è:_*\n>{tg_text_convert(data.get('backstory', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'))}"

    traits_and_abilities = "üß¨ *_–ß–µ—Ä—Ç—ã –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:_*\n" + "\n".join(f">\U00002022 *{trait}* ‚Äì {tg_text_convert(desc).lower()}" for trait, desc in data['traits_and_abilities'].items())

    ammunition = f'üõ°Ô∏è {format_ammunition(data)}'

    spells = f'ü™Ñ {format_spells(data)}'

    inventory = "üéí *_–ü—Ä–µ–¥–º–µ—Ç—ã:_*\n" + "\n".join(f">\U00002022 {tg_text_convert(item["name"])}" for item in data['inventory'])

    languages = "üó£Ô∏è *_–Ø–∑—ã–∫–∏:_*\n" + "\n".join(f">\U00002022 {tg_text_convert(language)}" for language in data['languages'])
        
    return {"name": name, "age": age, "main_char_info": card, "backstory": backstory, "traits_and_abilities": traits_and_abilities, "ammunition": ammunition, "spells": spells, "inventory": inventory, "languages": languages}