from aiogram import types, Router
from aiogram.types import InputMediaPhoto, FSInputFile, CallbackQuery, Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
import random
import aiohttp
import uuid

from keyboards.character_keyboards import *
from keyboards.common_keyboards import *
from server_requests.character_requests.character_requests import *
from forms import Form
from converter import *


router = Router()

# --- Some data for constructor ---
# –ù–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –Ω–µ –æ—á–µ–Ω—å –ø–æ–Ω—è—Ç–Ω–æ, –≥–¥–µ —ç—Ç–∏ —Å–ø–∏—Å–∫–∏ —Ö—Ä–∞–Ω–∏—Ç—å. –≤ handlers –Ω–µ –æ—á–µ–Ω—å, –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–∞–¥–∏ 3 —Å–ø–∏—Å–∫–æ–≤ —Ç–æ–∂–µ –Ω–µ –æ—á–µ–Ω—å.
# –ù—É –ø—É—Å—Ç—å –±—É–¥–µ—Ç —Ç—É—Ç –ø–æ–∫–∞
CLASSES = [
    "–í–∞—Ä–≤–∞—Ä",
    "–ë–∞—Ä–¥",
    "–ü–ª—É—Ç",
    "–î—Ä—É–∏–¥",
    "–ö–æ–ª–¥—É–Ω",
    "–ú–æ–Ω–∞—Ö",
    "–ü–∞–ª–∞–¥–∏–Ω",
    "–°–ª–µ–¥–æ–ø—ã—Ç",
    "–ñ—Ä–µ—Ü",
    "–ß–∞—Ä–æ–¥–µ–π",
    "–í–æ–∏–Ω",
    "–ö–æ–ª–¥—É–Ω"
]

RACES = ["–ß–µ–ª–æ–≤–µ–∫", "–≠–ª—å—Ñ", "–ü–æ–ª—É–æ—Ä–∫", "–ì–Ω–æ–º", "–î–≤–∞—Ä—Ñ", "–ü–æ–ª—É—Ä–æ—Å–ª–∏–∫", "–î—Ä–∞–∫–æ–Ω–æ—Ä–æ–∂–¥—ë–Ω–Ω—ã–π", "–ü–æ–ª—É—ç–ª—å—Ñ", "–¢–∏—Ñ–ª–∏–Ω–≥"]
GENDERS = ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"]

SUBRACES = {
    "–î—Ä–∞–∫–æ–Ω–æ—Ä–æ–∂–¥—ë–Ω–Ω—ã–π": ["–ö—Ä–∞—Å–Ω—ã–π –¥—Ä–∞–∫–æ–Ω–æ—Ä–æ–∂–¥—ë–Ω–Ω—ã–π", "–°–∏–Ω–∏–π –¥—Ä–∞–∫–æ–Ω–æ—Ä–æ–∂–¥—ë–Ω–Ω—ã–π"],
    "–î–≤–∞—Ä—Ñ": ["–ì–æ—Ä–Ω—ã–π –¥–≤–æ—Ä—Ñ", "–•–æ–ª–º–æ–≤–æ–π –¥–≤–æ—Ä—Ñ"],
    "–≠–ª—å—Ñ": ["–í—ã—Å—à–∏–π —ç–ª—å—Ñ", "–õ–µ—Å–Ω–æ–π —ç–ª—å—Ñ", "–¢—ë–º–Ω—ã–π —ç–ª—å—Ñ (–¥—Ä–æ—É)"],
    "–ì–Ω–æ–º": ["–ì–æ—Ä–Ω—ã–π –≥–Ω–æ–º", "–õ–µ—Å–Ω–æ–π –≥–Ω–æ–º"],
    "–ü–æ–ª—É—ç–ª—å—Ñ": ["–≠–ª—å—Ñ–∏–π—Å–∫–∏–π –ø–æ–ª—É—ç–ª—å—Ñ", "–ß–µ–ª–æ–≤–µ—á–∏–π –ø–æ–ª—É—ç–ª—å—Ñ"],
    "–ü–æ–ª—É—Ä–æ—Å–ª–∏–∫": ["–õ–æ–≤–∫–∏–π –ø–æ–ª—É—Ä–æ—Å–ª–∏–∫", "–°—Ç–æ–π–∫–∏–π –ø–æ–ª—É—Ä–æ—Å–ª–∏–∫"]
}

@router.callback_query(Form.regenerate_char)
async def regenerate_char(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await callback_query.answer()
    char = (await state.get_data())["char"]
    if callback_query.data == "yes":
        response = await auto_create_char({"gender": char["gender"], "race": char["race"], "character_class": char["character_class"]})
        response["user_id"] = str(callback_query.from_user.id)
        response["name"] = char["name"]
        response["surname"] = char["surname"]
        char = await update_char(response, char["id"])
        await state.update_data({"char": char})
        await callback_query.message.edit_caption(text=(await character_card(char))["main_char_info"],parse_mode="MarkdownV2",reply_markup=character_card_keyboard)
        await state.set_state(Form.character_card)
    else:
        await callback_query.message.edit_caption(text=(await character_card(char))["main_char_info"],parse_mode="MarkdownV2",reply_markup=character_card_keyboard)
        await state.set_state(Form.character_card)

@router.callback_query(Form.delete_character_confirm)
async def delete_character_confirm(callback_query: types.CallbackQuery, state: FSMContext):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await callback_query.answer()
    char = (await state.get_data())["char"]
    if callback_query.data == "yes":
        await delete_char(char["id"])
        await state.clear()
        await callback_query.message.edit_media(media=InputMediaPhoto(media=FSInputFile("assets/characters.png")), reply_markup=characters_keyboard)
        await callback_query.message.edit_caption(caption="–í—ã –∂–µ—Å—Ç–æ–∫–æ —É–¥–∞–ª–∏–ª–∏ –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!", reply_markup=characters_keyboard)
    if callback_query.data == "no":
        await callback_query.message.edit_caption(parse_mode="MarkdownV2",text=f"{(await character_card(char))['main_char_info']}",reply_markup=character_card_keyboard)
        await state.set_state(Form.character_card)

@router.callback_query(lambda c: c.data == 'create_character')
async def choose_creation(callback_query: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await callback_query.answer()
    await callback_query.message.edit_media(media=InputMediaPhoto(media=FSInputFile("assets/char_create.png")))
    await callback_query.message.edit_caption(
        caption="–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞?\n\nüîπ –ë—ã—Å—Ç—Ä–æ ‚Äî –ø–æ 3 –≤–æ–ø—Ä–æ—Å–∞–º\nüîπ –ü–æ–¥—Ä–æ–±–Ω–æ ‚Äî –≤—ã–±—Ä–∞–≤ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Ä—É—á–Ω—É—é",
        reply_markup=create_method_keyboard
    )

@router.callback_query(lambda c: c.data == 'quick_create')
async def quick_create_start(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await callback_query.answer()
    await callback_query.message.edit_caption(
        caption="–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ç—Ä–∏ –≤–æ–ø—Ä–æ—Å–∞, –∞ –º—ã –∑–∞–ø–æ–ª–Ω–∏–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ! :)\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",
        reply_markup=classes_keyboard
    )
    await state.set_state(Form.auto_char_class)

@router.callback_query(lambda c: c.data == 'detailed_create')
async def detailed_create_start(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await callback_query.answer()
    await callback_query.message.edit_caption(
        caption="–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ù–∞—á–Ω–µ–º –ø–æ —à–∞–≥–∞–º!\n\n–®–∞–≥ 1: –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:",
        reply_markup=get_keyboard(CLASSES, add_back=False)
    )
    await state.set_state(Form.CHOOSING_CLASS)




@router.callback_query(Form.CHOOSING_CLASS)
async def choose_class(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    if callback.data == "__random__":
        selected = random.choice(CLASSES)
    elif callback.data == "__back__":
        await callback.message.edit_caption(caption="–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=get_keyboard(CLASSES, add_back=False))
        return
    else:
        selected = callback.data

    await state.update_data(char_class=selected)
    await callback.message.edit_caption(caption="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=get_keyboard(RACES))
    await state.set_state(Form.CHOOSING_RACE)

@router.callback_query(Form.CHOOSING_RACE)
async def choose_race(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    if callback.data == "__random__":
        selected = random.choice(RACES)
    elif callback.data == "__back__":
        await callback.message.edit_caption(caption="–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=get_keyboard(CLASSES))
        await state.set_state(Form.CHOOSING_CLASS)
        return
    else:
        selected = callback.data

    await state.update_data(char_race=selected)

    if selected in SUBRACES:
        await callback.message.edit_caption(caption=f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞—Å—É –¥–ª—è {selected}:", reply_markup=get_keyboard(SUBRACES[selected]))
        await state.set_state(Form.CHOOSING_SUBRACE)
    else:
        await callback.message.edit_caption(caption="–í—ã–±–µ—Ä–∏—Ç–µ –≥–µ–Ω–¥–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=get_keyboard(GENDERS))
        await state.set_state(Form.CHOOSING_GENDER)

@router.callback_query(Form.CHOOSING_SUBRACE)
async def choose_subrace(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    user_data = await state.get_data()
    race = user_data.get("char_race")

    if callback.data == "__random__":
        selected = random.choice(SUBRACES[race])
    elif callback.data == "__back__":
        await callback.message.edit_caption(caption="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=get_keyboard(RACES))
        await state.set_state(Form.CHOOSING_RACE)
        return
    else:
        selected = callback.data

    await state.update_data(char_subrace=selected)
    await callback.message.edit_caption(caption="–í—ã–±–µ—Ä–∏—Ç–µ –≥–µ–Ω–¥–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=get_keyboard(GENDERS))
    await state.set_state(Form.CHOOSING_GENDER)

@router.callback_query(Form.CHOOSING_GENDER)
async def choose_gender(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    if callback.data == "__random__":
        selected = random.choice(GENDERS)
    elif callback.data == "__back__":
        user_data = await state.get_data()
        race = user_data.get("char_race")
        if race in SUBRACES:
            await callback.message.edit_caption(caption=f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞—Å—É –¥–ª—è {race}:", reply_markup=get_keyboard(SUBRACES[race]))
            await state.set_state(Form.CHOOSING_SUBRACE)
        else:
            await callback.message.edit_caption(caption="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=get_keyboard(RACES))
            await state.set_state(Form.CHOOSING_RACE)
        return
    else:
        selected = callback.data

    await state.update_data(char_gender=selected)
    data = await state.get_data()

    async with aiohttp.ClientSession() as session:
        async with session.get("http://localhost:8000/character-list-options", params=data) as resp:
            if resp.status == 200:
                json_data = await resp.json()
                json_data['inventory'] = list(filter(lambda x: isinstance(x, list), json_data['inventory']))
                await state.update_data(
                    json_data=json_data,
                    characteristics_options=json_data["options"],
                    current_stat_index=0
                )

                # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                init_payload = {
                    "user_id": str(callback.from_user.id),
                    "gender": data.get("char_gender"),
                    "character_class": data.get("char_class"),
                    "race": data.get("char_race"),
                    "subrace": data.get("char_subrace", "random")
                }

                async with session.post("http://localhost:8000/initialize-character-list", json=init_payload) as post_resp:
                    if post_resp.status == 200:
                        init_response = await post_resp.json()
                        await state.update_data(character_list=init_response)
                    else:
                        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")



                await ask_next_stat(callback.message, state)
                await state.set_state(Form.SETTING_CHARACTERISTIC)
            else:
                await callback.message.edit_caption(caption="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞.")

async def ask_next_stat(message: Message, state: FSMContext):
    data = await state.get_data()
    stat_names = list(data["characteristics_options"].keys())
    index = data["current_stat_index"]
    if index >= len(stat_names):
        await state.set_state(Form.CHOOSING_SKILLS)
        await start_skills_selection(message, state)
        return

    stat = stat_names[index]
    all_values = data["characteristics_options"][stat][0]
    recommended = set(data["characteristics_options"][stat][1])
    display_values = [
        f"{val} üåü" if val in recommended else val for val in all_values
    ]
    keyboard = get_keyboard(display_values)
    await message.edit_caption(caption=f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ *{stat}*:", reply_markup=keyboard, parse_mode="Markdown")

@router.callback_query(Form.SETTING_CHARACTERISTIC)
async def set_characteristic(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    stat_names = list(data["characteristics_options"].keys())
    index = data["current_stat_index"]
    stat = stat_names[index]

    if callback.data == "__random__":
        selected = random.choice(data["characteristics_options"][stat][0])
    elif callback.data == "__back__":
        if index == 0:
            await callback.message.edit_caption(caption="–í—ã–±–µ—Ä–∏—Ç–µ –≥–µ–Ω–¥–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=get_keyboard(GENDERS))
            await state.set_state(Form.CHOOSING_GENDER)
            return
        await state.update_data(current_stat_index=index - 1)
        await ask_next_stat(callback.message, state)
        return
    else:
        selected = callback.data.replace(" üåü", "")  # —É–¥–∞–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

    stats = data.get("char_stats", {})
    stats[stat] = selected
    await state.update_data(char_stats=stats, current_stat_index=index + 1)
    await ask_next_stat(callback.message, state)

async def start_skills_selection(message: Message, state: FSMContext):
    data = await state.get_data()
    skills = data["json_data"]["skils"]
    skills_list = skills["skills_list"]
    limit = skills["skills_limit"]
    await state.update_data(skills_selected=[], skills_limit=limit)
    await ask_next_skill(message, state)

async def ask_next_skill(message: Message, state: FSMContext):
    data = await state.get_data()
    selected = set(data["skills_selected"])
    skills_list = [s for s in data["json_data"]["skils"]["skills_list"] if s not in selected]
    limit = data["skills_limit"]

    if len(selected) >= limit:
        await message.edit_caption(caption=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Å–µ {limit} –Ω–∞–≤—ã–∫–æ–≤: {', '.join(selected)}")
        await state.set_state(Form.SELECTING_INVENTORY_ITEM)
        await state.update_data(current_inventory_index=0, inventory_selected=[])
        await ask_inventory_item(message, state)

        return

    keyboard = get_keyboard(skills_list)
    await message.edit_caption(caption=f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–≤—ã–∫ ({len(selected) + 1} –∏–∑ {limit}):", reply_markup=keyboard)

@router.callback_query(Form.CHOOSING_SKILLS)
async def choose_skill(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    selected = data["skills_selected"]
    limit = data["skills_limit"]
    all_skills = data["json_data"]["skils"]["skills_list"]

    if callback.data == "__random__":
        remaining = [s for s in all_skills if s not in selected]
        selected_skill = random.choice(remaining)
    elif callback.data == "__back__":
        if not selected:
            # –í–æ–∑–≤—Ä–∞—Ç –∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º
            stat_keys = list(data["characteristics_options"].keys())
            await state.update_data(current_stat_index=len(stat_keys)-1)
            await state.set_state(Form.SETTING_CHARACTERISTIC)
            await ask_next_stat(callback.message, state)
            return
        selected.pop()
        await state.update_data(skills_selected=selected)
        await ask_next_skill(callback.message, state)
        return
    else:
        selected_skill = callback.data

    if selected_skill not in selected:
        selected.append(selected_skill)

    await state.update_data(skills_selected=selected)
    await ask_next_skill(callback.message, state)


async def ask_inventory_item(message: Message, state: FSMContext):
    data = await state.get_data()
    index = data["current_inventory_index"]
    inventory = data["json_data"]["inventory"]

    if index >= len(inventory):
        selected_items = data["inventory_selected"]
        flat_items = [", ".join(items) for items in selected_items]
        await message.edit_caption(caption=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:\n" + "\n".join(flat_items))
        await ask_age(message, state)
        return


    options = inventory[index]
    display = [", ".join(option) for option in options]
    keyboard = get_keyboard(display)
    await message.edit_caption(caption=f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è ({index+1} –∏–∑ {len(inventory)}):", reply_markup=keyboard)

@router.callback_query(Form.SELECTING_INVENTORY_ITEM)
async def choose_inventory_item(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    index = data["current_inventory_index"]
    inventory = data["json_data"]["inventory"]
    selected_items = data["inventory_selected"]

    if callback.data == "__random__":
        choice = random.choice(inventory[index])
    elif callback.data == "__back__":
        if index == 0:
            await state.set_state(Form.CHOOSING_SKILLS)
            await ask_next_skill(callback.message, state)
            return
        await state.update_data(current_inventory_index=index - 1)
        selected_items.pop()
        await state.update_data(inventory_selected=selected_items)
        await ask_inventory_item(callback.message, state)
        return
    else:
        choice = callback.data.split(", ")

    selected_items.append(choice)
    await state.update_data(inventory_selected=selected_items, current_inventory_index=index + 1)
    await ask_inventory_item(callback.message, state)


async def ask_age(message: Message, state: FSMContext):
    data = await state.get_data()
    age_limits = data["json_data"].get("default_age", {"min": 16, "max": 100})
    min_age = age_limits["min"]
    max_age = age_limits["max"]

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üé≤ –°–ª—É—á–∞–π–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç")],
            # [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–æ—Ç {min_age} –¥–æ {max_age}):", reply_markup=keyboard)
    await state.set_state(Form.CHOOSING_AGE)

@router.message(Form.CHOOSING_AGE)
async def handle_age_input(message: Message, state: FSMContext):
    data = await state.get_data()
    age_limits = data["json_data"].get("default_age", {"min": 16, "max": 100})
    min_age = age_limits["min"]
    max_age = age_limits["max"]

    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.set_state(Form.SELECTING_INVENTORY_ITEM)
        await ask_inventory_item(message, state)
        return

    if message.text == "üé≤ –°–ª—É—á–∞–π–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç":
        age = random.randint(min_age, max_age)
        await state.update_data(char_age=age)
        await message.answer(f"–°–ª—É—á–∞–π–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –≤—ã–±—Ä–∞–Ω: {age}", reply_markup=ReplyKeyboardRemove())
        await ask_story(message, state)
        return

    try:
        age = int(message.text)
        if not (min_age <= age <= max_age):
            raise ValueError
    except ValueError:
        await message.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç {min_age} –¥–æ {max_age}.")
        return

    await state.update_data(char_age=age)
    await message.answer(f"–í–æ–∑—Ä–∞—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {age}", reply_markup=ReplyKeyboardRemove())
    await ask_story(message, state)


async def ask_story(message: Message, state: FSMContext):
    data = await state.get_data()
    stories = data["json_data"].get("default_story", ["–ë–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏"])

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üé≤ –°–ª—É—á–∞–π–Ω–∞—è –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è")],
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª—É—á–∞–π–Ω—É—é:", reply_markup=keyboard)
    await state.set_state(Form.CHOOSING_STORY)

@router.message(Form.CHOOSING_STORY)
async def handle_story_input(message: Message, state: FSMContext):
    data = await state.get_data()
    stories = data["json_data"].get("default_story", [])

    if message.text == "üé≤ –°–ª—É—á–∞–π–Ω–∞—è –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è":
        selected_story = random.choice(stories)
        await message.answer(f"–°–ª—É—á–∞–π–Ω–∞—è –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞:\n\n{selected_story}", reply_markup=ReplyKeyboardRemove())
    else:
        selected_story = message.text
        await message.answer("–ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())

    await state.update_data(char_story=selected_story)

    await ask_name(message, state)


async def ask_name(message: Message, state: FSMContext):
    data = await state.get_data()
    default_names = data["json_data"].get("default_names", ["–ò–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"])

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –∏–º—è")],
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª—É—á–∞–π–Ω–æ–µ:", reply_markup=keyboard)
    await state.set_state(Form.CHOOSING_NAME)

@router.message(Form.CHOOSING_NAME)
async def handle_name_input(message: Message, state: FSMContext):
    data = await state.get_data()
    names = data["json_data"].get("default_names", [])

    if message.text == "üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –∏–º—è":
        selected_name = random.choice(names) if names else "–ò–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        await message.answer(f"–°–ª—É—á–∞–π–Ω–æ–µ –∏–º—è –≤—ã–±—Ä–∞–Ω–æ: {selected_name}", reply_markup=ReplyKeyboardRemove())
    else:
        selected_name = message.text
        await message.answer(f"–ò–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {selected_name}", reply_markup=ReplyKeyboardRemove())

    await state.update_data(char_name=selected_name)

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –≤—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—é–º–µ
    await message.answer("–ü–µ—Ä—Å–æ–Ω–∞–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! üéâ")
    await show_character_summary(message, state)


async def show_character_summary(message: Message, state: FSMContext):
    data = await state.get_data()

    race = data.get("char_race", "‚Äî")
    subrace = data.get("char_subrace")
    if subrace:
        race = f"{race} ({subrace})"

    characteristics = "\n".join([f"- *{k}*: {v}" for k, v in data.get("char_stats", {}).items()])
    skills = ", ".join(data.get("skills_selected", []))
    inventory = "\n".join([f"- {', '.join(i)}" for i in data.get("inventory_selected", [])])
    story = data.get("char_story", "‚Äî")
    name = data.get("char_name", "‚Äî")

    character_list = data.get('character_list')
    

    character_list['stats']['strength'] = data.get("char_stats")['–°–∏–ª–∞']
    character_list['stats']['dexterity'] = data.get("char_stats")['–õ–æ–≤–∫–æ—Å—Ç—å']
    character_list['stats']['constitution'] = data.get("char_stats")['–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ']
    character_list['stats']['intelligence'] = data.get("char_stats")['–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç']
    character_list['stats']['wisdom'] = data.get("char_stats")['–ú—É–¥—Ä–æ—Å—Ç—å']
    character_list['stats']['charisma'] = data.get("char_stats")['–•–∞—Ä–∏–∑–º–∞']

    character_list['skills'] = data.get("skills_selected")

    for i in data.get('inventory_selected'):
        character_list['inventory'].append({
            'id': str(uuid.uuid4()),
            'count': 1,
            'name': i,
            'description': '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'
        })

    character_list['backstory'] = data.get("char_story")

    character_list['name'] = data.get("char_name")

    character_list['age'] = data.get("char_age")

    print(character_list)

    async with aiohttp.ClientSession() as session:
        async with session.put("http://localhost:8000/save-character-list", json=character_list) as post_resp:
            if post_resp.status == 200:
                print(post_resp)
            else:
                print(post_resp.json)
                print(post_resp)
                print(post_resp.status)
                init_response = await post_resp.json()
                print(init_response)
                print('API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É')




    text = (
        f"*üßù‚Äç‚ôÇÔ∏è –õ–∏—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:*\n"
        f"*–ò–º—è:* {name}\n"
        f"*–ö–ª–∞—Å—Å:* {data.get('char_class', '‚Äî')}\n"
        f"*–†–∞—Å–∞:* {race}\n"
        f"*–ü–æ–ª:* {data.get('char_gender', '‚Äî')}\n"
        f"*–í–æ–∑—Ä–∞—Å—Ç:* {data.get('char_age', '‚Äî')}\n\n"
        f"*üìä –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:*\n{characteristics}\n\n"
        f"*üéØ –ù–∞–≤—ã–∫–∏:*\n{skills}\n\n"
        f"*üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:*\n{inventory}\n\n"
        f"*üìñ –ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è:*\n_{story}_"
    )

    await message.answer(text, parse_mode="Markdown")






@router.callback_query(Form.auto_char_class)
async def enter_char_class(callback_query: types.CallbackQuery, state: FSMContext):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º —Ä–∞—Å—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await callback_query.answer()
    if callback_query.data == 'char_back':
        await state.clear()
        await callback_query.message.edit_media(media=InputMediaPhoto(media=FSInputFile("assets/characters.png")), reply_markup=characters_keyboard)
    else:
        await state.update_data({"character_class": callback_query.data})
        await callback_query.message.edit_caption(caption="–í—ã–±–µ—Ä–µ—Ç–µ —Ä–∞—Å—É –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",reply_markup=races_keyboard)
        await state.set_state(Form.auto_char_race)

@router.callback_query(Form.auto_char_race)
async def enter_char_race(callback_query: types.CallbackQuery, state: FSMContext):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º –ø–æ–ª–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await callback_query.answer()
    if callback_query.data == 'char_back':
        await callback_query.message.edit_caption(caption="–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ç—Ä–∏ –≤–æ–ø—Ä–æ—Å–∞, –∞ –º—ã –∑–∞–ø–æ–ª–Ω–∏–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ! :)\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",  reply_markup=classes_keyboard)
        await state.set_state(Form.auto_char_class)
    else:
        await state.update_data({"race": callback_query.data})
        await callback_query.message.edit_caption(caption="–í—ã–±–µ—Ä–µ—Ç–µ –ø–æ–ª –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",reply_markup=gender_keyboard)
        await state.set_state(Form.auto_char_gender)

@router.callback_query(Form.auto_char_gender)
async def enter_char_gender(callback_query: types.CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await callback_query.answer()
    if callback_query.data == 'char_back':
        await callback_query.message.edit_caption(caption="–í—ã–±–µ—Ä–µ—Ç–µ —Ä–∞—Å—É –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",reply_markup=races_keyboard)
        await state.set_state(Form.auto_char_race)
    else:
        gender = callback_query.data
        await state.update_data({"gender": gender})
        data = await state.get_data()
        response = await auto_create_char({"gender": data["gender"], "race": data["race"], "character_class": data["character_class"]})
        response["user_id"] = str(callback_query.from_user.id)
        char  = await create_char(response)
        await callback_query.message.delete()
        await callback_query.message.answer(text=(await character_card(char))["main_char_info"],parse_mode="MarkdownV2",reply_markup=character_card_keyboard)
        await state.set_state(Form.character_card)
        await state.update_data({"char": char})
        await state.update_data({"base_char_info" : {"gender": data["gender"], "race": data["race"], "character_class": data["character_class"]}})
    
@router.callback_query(lambda c: c.data == 'discard_character')
async def discard_character(callback_query: types.CallbackQuery,state: FSMContext):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await callback_query.answer()
    await callback_query.message.edit_caption(text="–£–¥–∞–ª—ë–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ *–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å*\. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å\?", reply_markup=yes_or_no_keyboard,parse_mode="MarkdownV2")
    await state.set_state(Form.discard_character)
    
@router.callback_query(Form.discard_character)
async def discard_character(callback_query: types.CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await callback_query.answer()
    char = await state.get_data()
    char_id = char["char"]["id"]
    if callback_query.data == 'yes':
        await delete_char(char_id)
        await callback_query.message.delete()
        await state.clear()
        await callback_query.message.answer_photo(media=InputMediaPhoto(media=FSInputFile("assets/characters.png")), reply_markup=characters_keyboard, caption="–í—ã –∂–µ—Å—Ç–æ–∫–æ —É–¥–∞–ª–∏–ª–∏ –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!")
    else:
        char = await state.get_data()
        base_info = char["base_char_info"]
        char = char["char"]
        await state.update_data({"base_char_info" : base_info})
        await state.update_data({"char" : char})
        await callback_query.message.delete()
        await state.set_state(Form.main_char_info_menu)
        await callback_query.message.answer(text=f"{(await character_card(char))['main_char_info']}",reply_markup=character_card_keyboard,parse_mode="MarkdownV2")
