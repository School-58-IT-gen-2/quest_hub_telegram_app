from aiogram import types, Router
from aiogram.fsm.context import FSMContext

from keyboards.character_keyboards import *
from keyboards.common_keyboards import *
from server_requests.character_requests.character_requests import *
from server_requests.character_requests.inventory_requests import *
from forms import Form
from converter import *


router = Router()

@router.callback_query(Form.inventory_menu)
async def inventory(callback_query: types.CallbackQuery, state: FSMContext):
    """–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await callback_query.answer()
    char = (await state.get_data())["char"]
    if callback_query.data == "items":
        items_arr = [[item["name"], item["id"]] for item in char["inventory"]]
        await callback_query.message.edit_text(text=f'üõ†Ô∏è *_–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ:_*', reply_markup=InlineKeyboardMarkup(inline_keyboard=(await build_arr_keyboard(items_arr))),parse_mode="MarkdownV2")
        await state.set_state(Form.items_menu)
    if callback_query.data == "ammunition":
        ammunition_arr = [[weapon["name"], weapon["id"]] for weapon in char["weapons_and_equipment"]]
        await callback_query.message.edit_text(text=f'üõ°Ô∏è *_–ê–º—É–Ω–∏—Ü–∏—è:_*', reply_markup=InlineKeyboardMarkup(inline_keyboard=(await build_arr_keyboard(ammunition_arr))),parse_mode="MarkdownV2")
        await state.set_state(Form.ammunition_menu)
    if callback_query.data == "exp":
        await callback_query.message.edit_text(text=f'*_–¢–µ–∫—É—â–∏–π –æ–ø—ã—Ç:_* {char["experience"]}', reply_markup=edit_keyboard,parse_mode="MarkdownV2")
        await state.set_state(Form.experience_menu)
    if callback_query.data == "gold":
        await callback_query.message.edit_text(text=f'*_–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞:_* {char["gold"]}', reply_markup=edit_keyboard,parse_mode="MarkdownV2")
        await state.set_state(Form.gold_menu)
    if callback_query.data == "back":
        await callback_query.message.edit_text(text=(await character_card(char))["main_char_info"],parse_mode="MarkdownV2",reply_markup=character_card_keyboard)
        await state.set_state(Form.character_card)

@router.callback_query(Form.items_menu)
async def items_menu(callback_query: types.CallbackQuery, state: FSMContext):
    """–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await callback_query.answer()
    char = (await state.get_data())["char"]
    if 'left' in callback_query.data or 'right' in callback_query.data:
        items_arr = [[item["name"], item["id"]] for item in char["inventory"]]
        await callback_query.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(inline_keyboard=(await change_keyboard_page(callback_query.data, items_arr))))
    elif callback_query.data == "dict_kb_back":
        await callback_query.message.edit_text(text='üìã *_–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:_*', reply_markup=inventory_keyboard,parse_mode="MarkdownV2")
        await state.set_state(Form.inventory_menu)
    else:
        await state.set_state(Form.inventory_item_menu)
        await state.update_data({"item_id": callback_query.data})
        await callback_query.message.edit_text(text=(await character_card(char))["inventory"][callback_query.data], reply_markup=item_keyboard, parse_mode="MarkdownV2")

@router.callback_query(Form.inventory_item_menu)
async def inventory_item_menu(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–µ–¥–º–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await callback_query.answer()
    data = await state.get_data()
    char = data["char"]
    item_id = data["item_id"]
    if callback_query.data == "back":
        items_arr = [[item["name"], item["id"]] for item in char["inventory"]]
        await callback_query.message.edit_text(text=f'üõ†Ô∏è *_–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ:_*', reply_markup=InlineKeyboardMarkup(inline_keyboard=(await build_arr_keyboard(items_arr))),parse_mode="MarkdownV2")
        await state.set_state(Form.items_menu)
    elif callback_query.data == "change_name":
        await callback_query.message.edit_text(text=f'{(await character_card(char))["inventory"][item_id]}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:', parse_mode="MarkdownV2")
        await state.set_state(Form.change_inventory_item_name)
    elif callback_query.data == "change_desc":
        await callback_query.message.edit_text(text=f'{(await character_card(char))["inventory"][item_id]}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:', parse_mode="MarkdownV2")
        await state.set_state(Form.change_inventory_item_desc)

@router.message(Form.change_inventory_item_name)
async def change_inventory_item_name(message: types.Message, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è"""
    data = await state.get_data()
    item_id = data["item_id"]
    char_id = data["char"]["id"]
    item = await get_item(char_id, item_id)
    item["name"] = message.text
    item = await update_item(char_id, item)
    char = await get_char(char_id)
    char = char[0]
    await state.update_data({"char": char})
    await state.set_state(Form.inventory_item_menu)
    await message.answer(text=(await character_card(char))["inventory"][item_id], reply_markup=item_keyboard, parse_mode="MarkdownV2")

@router.message(Form.change_inventory_item_desc)
async def change_inventory_item_desc(message: types.Message, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è"""
    data = await state.get_data()
    item_id = data["item_id"]
    char_id = data["char"]["id"]
    item = await get_item(char_id, item_id)
    item["description"] = message.text
    item = await update_item(char_id, item)
    char = await get_char(char_id)
    char = char[0]
    await state.update_data({"char": char})
    await state.set_state(Form.inventory_item_menu)
    await message.answer(text=(await character_card(char))["inventory"][item_id], reply_markup=item_keyboard, parse_mode="MarkdownV2")

@router.callback_query(Form.gold_menu)
async def gold_menu(callback_query: types.CallbackQuery, state: FSMContext):
    """–ó–æ–ª–æ—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await callback_query.answer()
    char = (await state.get_data())["char"]
    if callback_query.data == 'back':
        await callback_query.message.edit_text(text='üìã *_–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:_*', reply_markup=inventory_keyboard,parse_mode="MarkdownV2")
        await state.set_state(Form.inventory_menu)
    else:
        await callback_query.message.edit_text(text=f"*_–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞:_* {char['gold']}\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞\, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å/—É–±—Ä–∞—Ç—å\. –ù–∞–ø—Ä–∏–º–µ—Ä `+10` –∏–ª–∏ `-4`\.",parse_mode="MarkdownV2")
        await state.set_state(Form.change_gold)

@router.message(Form.change_gold)
async def change_gold(message: types.Message, state: FSMContext):
    """–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    char = (await state.get_data())["char"]
    data = message.text
    if check_int(data):
        if char['gold'] + int(data) < 0:
            await message.answer(text="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–æ–ª—å—à–µ –∑–æ–ª–æ—Ç–∞, —á–µ–º —É –≤–∞—Å –µ—Å—Ç—å.")
        else:
            await update_gold(char["id"], data)
            char['gold'] += int(data)
            await state.update_data({"char": char})
            await message.answer(text=f'*_–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞:_* {char["gold"]}', reply_markup=edit_keyboard,parse_mode="MarkdownV2")
            await state.set_state(Form.gold_menu)
    else:
        await message.answer(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞.")

@router.callback_query(Form.ammunition_menu)
async def ammunition_menu(callback_query: types.CallbackQuery, state: FSMContext):
    """–ê–º—É–Ω–∏—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await callback_query.answer()
    char = (await state.get_data())["char"]
    if 'left' in callback_query.data or 'right' in callback_query.data:
        ammunition_arr = [[weapon["name"], weapon["id"]] for weapon in char["weapons_and_equipment"]]
        await callback_query.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(inline_keyboard=(await change_keyboard_page(callback_query.data, ammunition_arr))))
    elif callback_query.data == "dict_kb_back":
        await callback_query.message.edit_text(text='üìã *_–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:_*', reply_markup=inventory_keyboard,parse_mode="MarkdownV2")
        await state.set_state(Form.inventory_menu)
    else:
        await state.set_state(Form.ammunition_item_menu)
        await state.update_data({"item_id": callback_query.data})
        await callback_query.message.edit_text(text=(await character_card(char))["ammunition"][callback_query.data], reply_markup=item_keyboard, parse_mode="MarkdownV2")

@router.callback_query(Form.ammunition_item_menu)
async def ammunition_item_menu(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–µ–¥–º–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await callback_query.answer()
    data = await state.get_data()
    char = data["char"]
    item_id = data["item_id"]
    if callback_query.data == "back":
        ammunition_arr = [[weapon["name"], weapon["id"]] for weapon in char["weapons_and_equipment"]]
        await callback_query.message.edit_text(text=f'üõ°Ô∏è *_–ê–º—É–Ω–∏—Ü–∏—è:_*', reply_markup=InlineKeyboardMarkup(inline_keyboard=(await build_arr_keyboard(ammunition_arr))),parse_mode="MarkdownV2")
        await state.set_state(Form.ammunition_menu)
    elif callback_query.data == "change_name":
        await callback_query.message.edit_text(text=f'{(await character_card(char))["ammunition"][item_id]}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:', parse_mode="MarkdownV2")
        await state.set_state(Form.change_ammunition_item_name)
    elif callback_query.data == "change_desc":
        await callback_query.message.edit_text(text=f'{(await character_card(char))["ammunition"][item_id]}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:', parse_mode="MarkdownV2")
        await state.set_state(Form.change_ammunition_item_desc)

@router.message(Form.change_ammunition_item_name)
async def change_ammunition_item_name(message: types.Message, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è"""
    data = await state.get_data()
    item_id = data["item_id"]
    char_id = data["char"]["id"]
    item = await get_ammunition(char_id, item_id)
    item["name"] = message.text
    item = await update_ammunition(char_id, item)
    char = await get_char(char_id)
    char = char[0]
    await state.update_data({"char": char})
    await state.set_state(Form.ammunition_item_menu)
    await message.answer(text=(await character_card(char))["ammunition"][item_id], reply_markup=item_keyboard, parse_mode="MarkdownV2")

@router.message(Form.change_ammunition_item_desc)
async def change_ammunition_item_desc(message: types.Message, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è"""
    data = await state.get_data()
    item_id = data["item_id"]
    char_id = data["char"]["id"]
    item = await get_ammunition(char_id, item_id)
    item["description"] = message.text
    item = await update_ammunition(char_id, item)
    char = await get_char(char_id)
    char = char[0]
    await state.update_data({"char": char})
    await state.set_state(Form.ammunition_item_menu)
    await message.answer(text=(await character_card(char))["ammunition"][item_id], reply_markup=item_keyboard, parse_mode="MarkdownV2")

@router.callback_query(Form.experience_menu)
async def experience_menu(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–ø—ã—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await callback_query.answer()
    char = (await state.get_data())["char"]
    if callback_query.data == 'back':
        await callback_query.message.edit_text(text='üìã *_–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:_*', reply_markup=inventory_keyboard,parse_mode="MarkdownV2")
        await state.set_state(Form.inventory_menu)
    else:
        await callback_query.message.edit_text(text=f"*_–¢–µ–∫—É—â–∏–π –æ–ø—ã—Ç:_* {char['experience']}\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞\, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å/—É–±—Ä–∞—Ç—å\. –ù–∞–ø—Ä–∏–º–µ—Ä `+12` –∏–ª–∏ `-3`\.",parse_mode="MarkdownV2")
        await state.set_state(Form.change_xp)

@router.message(Form.change_xp)
async def change_xp(message: types.Message, state: FSMContext):
    """–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    char = (await state.get_data())["char"]
    data = message.text
    if check_int(data):
        if char['experience'] + int(data) < 0:
            await message.answer(text="–£ –≤–∞—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞.")
        else:
            await update_experience(char["id"], data)
            char['experience'] += int(data)
            await state.update_data({"char": char})
            await message.answer(text=f'*_–¢–µ–∫—É—â–∏–π –æ–ø—ã—Ç:_* {char["experience"]}', reply_markup=edit_keyboard,parse_mode="MarkdownV2")
            await state.set_state(Form.experience_menu)
    else:
        await message.answer(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞.")