import asyncio
import json
import random

from aiogram import Dispatcher, types, Router
from aiogram.types import InputMediaPhoto, FSInputFile
from aiogram.fsm.context import FSMContext

from keyboards.character_keyboards import *
from keyboards.common_keyboards import *
from server_requests.character_requests import *
from handlers.commands import main_menu, main_menu_query
from forms import Form
from converter import *


dp = Dispatcher()
router = Router()

@router.callback_query(lambda c: c.data == 'characters')
async def characters(callback_query: types.CallbackQuery, state: FSMContext):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
    await callback_query.answer()
    await state.clear()
    await callback_query.message.edit_media(media=InputMediaPhoto(media=FSInputFile("assets/characters.png")), reply_markup=characters_keyboard)

@router.callback_query(lambda c: c.data == 'view_characters')
async def view_characters(callback_query: types.CallbackQuery, state: FSMContext):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await callback_query.answer()
    await state.clear()
    user_chars = await get_char_by_user_id(callback_query.from_user.id)
    if len(user_chars) == 0:
        await callback_query.message.edit_caption(caption="–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π", reply_markup=characters_keyboard)
    else:
        char_dict = dict()
        for char in user_chars:
            char_dict[f'{char["name"]} {char["surname"]}'] = str(char["id"])
        await callback_query.message.edit_media(media=InputMediaPhoto(media=FSInputFile("assets/characters.png")), reply_markup=await build_dict_keyboard(char_dict))
        await state.set_state(Form.view_character)

@router.callback_query(Form.view_character)
async def view_char(callback_query: types.CallbackQuery, state: FSMContext):
    """–í—ã–≤–æ–¥ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await callback_query.answer()
    if 'left' in callback_query.data or 'right' in callback_query.data:
        user_chars = await get_char_by_user_id(callback_query.from_user.id)
        char_dict = dict()
        for char in user_chars:
            char_dict[f'{char["name"]} {char["surname"]}'] = str(char["id"])
        await callback_query.message.edit_caption(reply_markup=await change_keyboard_page(callback_query.data, char_dict))
    elif callback_query.data == "dict_kb_back":
        await characters(callback_query, state)
    else:
        char = await get_char(int(callback_query.data))
        char = char[0]
        await callback_query.message.delete()
        await callback_query.message.answer(text=character_card(char)["main_char_info"],parse_mode="MarkdownV2",reply_markup=character_card_keyboard) 
        await state.set_state(Form.character_card)
        await state.update_data({"char": char})

@router.callback_query(Form.character_card)
async def view_char_params(callback_query: types.CallbackQuery, state: FSMContext):
    """–í—ã–≤–æ–¥ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–µ—Å–æ–Ω–∞–∂–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await callback_query.answer()
    char = await state.get_data()
    char = char["char"]
    if callback_query.data == "inventory":
        await callback_query.message.edit_text(text='üìã *_–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:_*', reply_markup=inventory_keyboard,parse_mode="MarkdownV2")
        await state.set_state(Form.inventory_menu)
    if callback_query.data == "notes":
        notes_dict = dict()
        if char["notes"]:
            for note in char["notes"]:
                notes_dict[note["title"]] = note["id"]
        await callback_query.message.edit_text(text='‚úèÔ∏è *_–ó–∞–º–µ—Ç–∫–∏:_*', reply_markup=await build_notes_keyboard(notes_dict),parse_mode="MarkdownV2")
        await state.set_state(Form.notes_menu)
    if callback_query.data == "traits":
        await callback_query.message.edit_text(text=character_card(char)["traits_and_abilities"], reply_markup=edit_keyboard,parse_mode="MarkdownV2")
        await state.set_state(Form.traits_menu)
    if callback_query.data == "main_char_info":
        await callback_query.message.edit_text(text='üë§ *_–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:_*', reply_markup=main_char_info_keyboard,parse_mode="MarkdownV2")
        await state.set_state(Form.main_char_info_menu)
    if callback_query.data == "lvl":
        await callback_query.message.edit_text(text=f'*_–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å:_* {char['lvl'] if char['lvl'] else 1}', reply_markup=edit_keyboard,parse_mode="MarkdownV2")
        await state.set_state(Form.lvl_menu)
    if callback_query.data == "spells":
        await callback_query.message.edit_text(text='ü™Ñ *_–ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è:_*\n' + character_card(char)["spells"], reply_markup=edit_keyboard,parse_mode="MarkdownV2")
        await state.set_state(Form.spells_menu)
    if callback_query.data == 'delete_character':
        await callback_query.message.edit_text(text="–£–¥–∞–ª—ë–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", reply_markup=yes_or_no_keyboard)
        await state.set_state(Form.delete_character_confirm)
    if callback_query.data == 'regenerate_character_from_put':
        await callback_query.message.edit_text(text="–í–µ—Å—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –±—É–¥–µ—Ç —É—Ç–µ—Ä—è–Ω. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", reply_markup=yes_or_no_keyboard)
        await state.set_state(Form.regenerate_char)

@router.callback_query(Form.notes_menu)
async def notes_menu(callback_query: types.CallbackQuery, state: FSMContext):
    """–ó–∞–º–µ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await callback_query.answer()
    char = await state.get_data()
    char = char["char"]
    if 'left' in callback_query.data or 'right' in callback_query.data:
        notes_dict = dict()
        if char["notes"]:
            for note in char["notes"]:
                notes_dict[note["title"]] = note["id"]
        await callback_query.message.edit_caption(reply_markup=await change_notes_keyboard_page(callback_query.data, notes_dict))
    elif callback_query.data == "dict_kb_back":
        await callback_query.message.edit_text(text=character_card(char)["main_char_info"],parse_mode="MarkdownV2",reply_markup=character_card_keyboard) 
        await state.set_state(Form.character_card)
    elif callback_query.data == "create_note":
        await callback_query.message.edit_text(text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏:")
        await state.set_state(Form.create_note_title)
    else:
        await state.set_state(Form.note_menu)
        await state.update_data({"item_id": callback_query.data})
        await callback_query.message.edit_text(text=character_card(char)["notes"][callback_query.data], reply_markup=note_keyboard, parse_mode="MarkdownV2")

@router.message(Form.create_note_title)
async def create_note_title(message: types.Message, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏"""
    title = message.text
    await state.update_data({"note_title": title})
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏:")
    await state.set_state(Form.create_note_text)

@router.message(Form.create_note_text)
async def create_note_text(message: types.Message, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏"""
    text = message.text
    data = await state.get_data()
    char = data["char"]
    char_id = char["id"]
    title = data["note_title"]
    note = {"title": title, "text": text}
    note = await add_note(char_id, note)
    char = await get_char(char_id)
    char = char[0]
    await state.update_data({"char": char})
    await state.set_state(Form.note_menu)
    await state.update_data({"item_id": note["id"]})
    await message.answer(text=character_card(char)["notes"][note["id"]], reply_markup=note_keyboard, parse_mode="MarkdownV2")

@router.callback_query(Form.note_menu)
async def note_menu(callback_query: types.CallbackQuery, state: FSMContext):
    """–ó–∞–º–µ—Ç–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await callback_query.answer()
    data = await state.get_data()
    char = data["char"]
    item_id = data["item_id"]
    if callback_query.data == "back":
        notes_dict = dict()
        if char["notes"]:
            for note in char["notes"]:
                notes_dict[note["title"]] = note["id"]
        await callback_query.message.edit_text(text='‚úèÔ∏è *_–ó–∞–º–µ—Ç–∫–∏:_*', reply_markup=await build_notes_keyboard(notes_dict),parse_mode="MarkdownV2")
        await state.set_state(Form.notes_menu)
    elif callback_query.data == "change_title":
        await callback_query.message.edit_text(text=f'{character_card(char)["notes"][item_id]}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:', parse_mode="MarkdownV2")
        await state.set_state(Form.change_note_title)
    elif callback_query.data == "change_text":
        await callback_query.message.edit_text(text=f'{character_card(char)["notes"][item_id]}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:', parse_mode="MarkdownV2")
        await state.set_state(Form.change_note_text)

@router.message(Form.change_note_title)
async def change_note_title(message: types.Message, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏"""
    data = await state.get_data()
    item_id = data["item_id"]
    char_id = data["char"]["id"]
    item = await get_note(char_id, item_id)
    item["title"] = message.text
    item = await update_note(char_id, item)
    char = await get_char(char_id)
    char = char[0]
    await state.update_data({"char": char})
    await state.set_state(Form.inventory_item_menu)
    await message.answer(text=character_card(char)["notes"][item_id], reply_markup=note_keyboard, parse_mode="MarkdownV2")

@router.message(Form.change_note_text)
async def change_note_text(message: types.Message, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏"""
    data = await state.get_data()
    item_id = data["item_id"]
    char_id = data["char"]["id"]
    item = await get_note(char_id, item_id)
    item["text"] = message.text
    item = await update_note(char_id, item)
    char = await get_char(char_id)
    char = char[0]
    await state.update_data({"char": char})
    await state.set_state(Form.inventory_item_menu)
    await message.answer(text=character_card(char)["notes"][item_id], reply_markup=note_keyboard, parse_mode="MarkdownV2")

@router.callback_query(Form.main_char_info_menu)
async def main_char_info_menu(callback_query: types.CallbackQuery, state: FSMContext):
    """–û—Å–Ω–æ–≤–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ"""
    await callback_query.answer()
    char = await state.get_data()
    char = char["char"]
    if callback_query.data == "name":
        await callback_query.message.edit_text(text=character_card(char)["name"], reply_markup=edit_keyboard,parse_mode="MarkdownV2")
        await state.set_state(Form.name_menu)
    if callback_query.data == "age":
        await callback_query.message.edit_text(text=character_card(char)["age"], reply_markup=edit_keyboard,parse_mode="MarkdownV2")
        await state.set_state(Form.age_menu)
    if callback_query.data == "backstory":
        await callback_query.message.edit_text(text=character_card(char)["backstory"], reply_markup=edit_keyboard,parse_mode="MarkdownV2")
        await state.set_state(Form.backstory_menu)
    if callback_query.data == "languages":
        await callback_query.message.edit_text(text=character_card(char)["languages"], reply_markup=edit_keyboard,parse_mode="MarkdownV2")
        await state.set_state(Form.languages_menu)
    if callback_query.data == "back":
        await callback_query.message.edit_text(text=character_card(char)["main_char_info"],parse_mode="MarkdownV2",reply_markup=character_card_keyboard) 
        await state.set_state(Form.character_card)

@router.callback_query(Form.traits_menu)
async def traits_menu(callback_query: types.CallbackQuery, state: FSMContext):
    """–ß–µ—Ä—Ç—ã –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await callback_query.answer()
    char = await state.get_data()
    char = char["char"]
    if callback_query.data == 'back':
        await callback_query.message.edit_text(text=character_card(char)["main_char_info"],parse_mode="MarkdownV2",reply_markup=character_card_keyboard) 
        await state.set_state(Form.character_card)

@router.callback_query(Form.spells_menu)
async def spells_menu(callback_query: types.CallbackQuery, state: FSMContext):
    """–ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await callback_query.answer()
    char = await state.get_data()
    char = char["char"]
    if callback_query.data == 'back':
        await callback_query.message.edit_text(text=character_card(char)["main_char_info"],parse_mode="MarkdownV2",reply_markup=character_card_keyboard) 
        await state.set_state(Form.character_card)

@router.callback_query(Form.lvl_menu)
async def lvl_menu(callback_query: types.CallbackQuery, state: FSMContext):
    """–£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await callback_query.answer()
    char = await state.get_data()
    char = char["char"]
    if callback_query.data == 'back':
        await callback_query.message.edit_text(text=character_card(char)["main_char_info"],parse_mode="MarkdownV2",reply_markup=character_card_keyboard) 
        await state.set_state(Form.character_card)

@router.callback_query(Form.name_menu)
async def name_menu(callback_query: types.CallbackQuery, state: FSMContext):
    """–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await callback_query.answer()
    char = await state.get_data()
    char = char["char"]
    if callback_query.data == 'back':
        await callback_query.message.edit_text(text='üë§ *_–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:_*', reply_markup=main_char_info_keyboard,parse_mode="MarkdownV2")
        await state.set_state(Form.main_char_info_menu)

@router.callback_query(Form.age_menu)
async def age_menu(callback_query: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑—Ä–∞—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await callback_query.answer()
    char = await state.get_data()
    char = char["char"]
    if callback_query.data == 'back':
        await callback_query.message.edit_text(text='üë§ *_–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:_*', reply_markup=main_char_info_keyboard,parse_mode="MarkdownV2")
        await state.set_state(Form.main_char_info_menu)

@router.callback_query(Form.backstory_menu)
async def backstory_menu(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await callback_query.answer()
    char = await state.get_data()
    char = char["char"]
    if callback_query.data == 'back':
        await callback_query.message.edit_text(text='üë§ *_–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:_*', reply_markup=main_char_info_keyboard,parse_mode="MarkdownV2")
        await state.set_state(Form.main_char_info_menu)

@router.callback_query(Form.languages_menu)
async def languages_menu(callback_query: types.CallbackQuery, state: FSMContext):
    """–Ø–∑—ã–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await callback_query.answer()
    char = await state.get_data()
    char = char["char"]
    if callback_query.data == 'back':
        await callback_query.message.edit_text(text='üë§ *_–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:_*', reply_markup=main_char_info_keyboard,parse_mode="MarkdownV2")
        await state.set_state(Form.main_char_info_menu)

@router.callback_query(Form.inventory_menu)
async def inventory(callback_query: types.CallbackQuery, state: FSMContext):
    """–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await callback_query.answer()
    char = await state.get_data()
    char = char["char"]
    if callback_query.data == "items":
        item_dict = dict()
        for item in char["inventory"]:
            item_dict[item["name"]] = item["id"]
        await callback_query.message.edit_text(text=f'üõ†Ô∏è *_–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ:_*', reply_markup=await build_dict_keyboard(item_dict),parse_mode="MarkdownV2")
        await state.set_state(Form.items_menu)
    if callback_query.data == "ammunition":
        ammunition_dict = dict()
        for weapon in char["weapons_and_equipment"]:
            ammunition_dict[weapon["name"]] = weapon["id"]
        await callback_query.message.edit_text(text=f'üõ°Ô∏è *_–ê–º—É–Ω–∏—Ü–∏—è:_*', reply_markup=await build_dict_keyboard(ammunition_dict),parse_mode="MarkdownV2")
        await state.set_state(Form.ammunition_menu)
    if callback_query.data == "exp":
        await callback_query.message.edit_text(text=f'*_–¢–µ–∫—É—â–∏–π –æ–ø—ã—Ç:_* {char['experience']}', reply_markup=edit_keyboard,parse_mode="MarkdownV2")
        await state.set_state(Form.experience_menu)
    if callback_query.data == "gold":
        await callback_query.message.edit_text(text=f'*_–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞:_* {char['gold']}', reply_markup=edit_keyboard,parse_mode="MarkdownV2")
        await state.set_state(Form.gold_menu)
    if callback_query.data == "back":
        await callback_query.message.edit_text(text=character_card(char)["main_char_info"],parse_mode="MarkdownV2",reply_markup=character_card_keyboard) 
        await state.set_state(Form.character_card)

@router.callback_query(Form.items_menu)
async def items_menu(callback_query: types.CallbackQuery, state: FSMContext):
    """–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await callback_query.answer()
    char = await state.get_data()
    char = char["char"]
    if 'left' in callback_query.data or 'right' in callback_query.data:
        item_dict = dict()
        for item in char["inventory"]:
            item_dict[item["name"]] = item["id"]
        await callback_query.message.edit_caption(reply_markup=await change_keyboard_page(callback_query.data, item_dict))
    elif callback_query.data == "dict_kb_back":
        await callback_query.message.edit_text(text='üéí *_–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:_*', reply_markup=inventory_keyboard,parse_mode="MarkdownV2")
        await state.set_state(Form.inventory_menu)
    else:
        await state.set_state(Form.inventory_item_menu)
        await state.update_data({"item_id": callback_query.data})
        await callback_query.message.edit_text(text=character_card(char)["inventory"][callback_query.data], reply_markup=item_keyboard, parse_mode="MarkdownV2")

@router.callback_query(Form.inventory_item_menu)
async def inventory_item_menu(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–µ–¥–º–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await callback_query.answer()
    data = await state.get_data()
    char = data["char"]
    item_id = data["item_id"]
    if callback_query.data == "back":
        item_dict = dict()
        for item in char["inventory"]:
            item_dict[item["name"]] = item["id"]
        await callback_query.message.edit_text(text=f'üõ†Ô∏è *_–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ:_*', reply_markup=await build_dict_keyboard(item_dict),parse_mode="MarkdownV2")
        await state.set_state(Form.items_menu)
    elif callback_query.data == "change_name":
        await callback_query.message.edit_text(text=f'{character_card(char)["inventory"][item_id]}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:', parse_mode="MarkdownV2")
        await state.set_state(Form.change_inventory_item_name)
    elif callback_query.data == "change_desc":
        await callback_query.message.edit_text(text=f'{character_card(char)["inventory"][item_id]}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:', parse_mode="MarkdownV2")
        await state.set_state(Form.change_inventory_item_desc)

@router.message(Form.change_inventory_item_name)
async def change_inventory_item_name(message: types.Message, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è"""
    data = await state.get_data()
    item_id = data["item_id"]
    char_id = data["char"]["id"]
    item = await get_item(char_id, item_id)
    item["name"] = message.text
    item = await update_item(char_id, item)
    char = await get_char(char_id)
    char = char[0]
    await state.update_data({"char": char})
    await state.set_state(Form.inventory_item_menu)
    await message.answer(text=character_card(char)["inventory"][item_id], reply_markup=item_keyboard, parse_mode="MarkdownV2")

@router.message(Form.change_inventory_item_desc)
async def change_inventory_item_desc(message: types.Message, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è"""
    data = await state.get_data()
    item_id = data["item_id"]
    char_id = data["char"]["id"]
    item = await get_item(char_id, item_id)
    item["description"] = message.text
    item = await update_item(char_id, item)
    char = await get_char(char_id)
    char = char[0]
    await state.update_data({"char": char})
    await state.set_state(Form.inventory_item_menu)
    await message.answer(text=character_card(char)["inventory"][item_id], reply_markup=item_keyboard, parse_mode="MarkdownV2")

@router.callback_query(Form.gold_menu)
async def gold_menu(callback_query: types.CallbackQuery, state: FSMContext):
    """–ó–æ–ª–æ—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await callback_query.answer()
    char = await state.get_data()
    char = char["char"]
    if callback_query.data == 'back':
        await callback_query.message.edit_text(text='üéí *_–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:_*', reply_markup=inventory_keyboard,parse_mode="MarkdownV2")
        await state.set_state(Form.inventory_menu)
    else:
        await callback_query.message.edit_text(text=f'*_–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞:_* {char['gold']}\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞\, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å/—É–±—Ä–∞—Ç—å\. –ù–∞–ø—Ä–∏–º–µ—Ä `+10` –∏–ª–∏ `-4`\.',parse_mode="MarkdownV2")
        await state.set_state(Form.change_gold)

@router.message(Form.change_gold)
async def change_gold(message: types.Message, state: FSMContext):
    """–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    char = await state.get_data()
    char = char["char"]
    char_id = char["id"]
    data = message.text
    if check_int(data):
        if char['gold'] + int(data) < 0:
            await message.answer(text="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–æ–ª—å—à–µ –∑–æ–ª–æ—Ç–∞, —á–µ–º —É –≤–∞—Å –µ—Å—Ç—å.")
        else:
            await update_gold(char_id, data)
            char['gold'] += int(data)
            await state.update_data({"char": char})
            await message.answer(text=f'*_–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞:_* {char["gold"]}', reply_markup=edit_keyboard,parse_mode="MarkdownV2")
            await state.set_state(Form.gold_menu)
    else:
        await message.answer(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞.")

@router.callback_query(Form.ammunition_menu)
async def ammunition_menu(callback_query: types.CallbackQuery, state: FSMContext):
    """–ê–º—É–Ω–∏—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await callback_query.answer()
    char = await state.get_data()
    char = char["char"]
    if 'left' in callback_query.data or 'right' in callback_query.data:
        ammunition_dict = dict()
        for weapon in char["weapons_and_equipment"]:
            ammunition_dict[weapon["name"]] = weapon["id"]
        await callback_query.message.edit_caption(reply_markup=await change_keyboard_page(callback_query.data, ammunition_dict))
    elif callback_query.data == "dict_kb_back":
        await callback_query.message.edit_text(text='üéí *_–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:_*', reply_markup=inventory_keyboard,parse_mode="MarkdownV2")
        await state.set_state(Form.inventory_menu)
    else:
        await state.set_state(Form.ammunition_item_menu)
        await state.update_data({"item_id": callback_query.data})
        await callback_query.message.edit_text(text=character_card(char)["ammunition"][callback_query.data], reply_markup=item_keyboard, parse_mode="MarkdownV2")

@router.callback_query(Form.ammunition_item_menu)
async def ammunition_item_menu(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–µ–¥–º–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await callback_query.answer()
    data = await state.get_data()
    char = data["char"]
    item_id = data["item_id"]
    if callback_query.data == "back":
        ammunition_dict = dict()
        for weapon in char["weapons_and_equipment"]:
            ammunition_dict[weapon["name"]] = weapon["id"]
        await callback_query.message.edit_text(text=f'üõ°Ô∏è *_–ê–º—É–Ω–∏—Ü–∏—è:_*', reply_markup=await build_dict_keyboard(ammunition_dict),parse_mode="MarkdownV2")
        await state.set_state(Form.ammunition_menu)
    elif callback_query.data == "change_name":
        await callback_query.message.edit_text(text=f'{character_card(char)["ammunition"][item_id]}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:', parse_mode="MarkdownV2")
        await state.set_state(Form.change_ammunition_item_name)
    elif callback_query.data == "change_desc":
        await callback_query.message.edit_text(text=f'{character_card(char)["ammunition"][item_id]}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:', parse_mode="MarkdownV2")
        await state.set_state(Form.change_ammunition_item_desc)

@router.message(Form.change_ammunition_item_name)
async def change_ammunition_item_name(message: types.Message, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è"""
    data = await state.get_data()
    item_id = data["item_id"]
    char_id = data["char"]["id"]
    item = await get_ammunition(char_id, item_id)
    item["name"] = message.text
    item = await update_ammunition(char_id, item)
    char = await get_char(char_id)
    char = char[0]
    await state.update_data({"char": char})
    await state.set_state(Form.ammunition_item_menu)
    await message.answer(text=character_card(char)["ammunition"][item_id], reply_markup=item_keyboard, parse_mode="MarkdownV2")

@router.message(Form.change_ammunition_item_desc)
async def change_ammunition_item_desc(message: types.Message, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è"""
    data = await state.get_data()
    item_id = data["item_id"]
    char_id = data["char"]["id"]
    item = await get_ammunition(char_id, item_id)
    item["description"] = message.text
    item = await update_ammunition(char_id, item)
    char = await get_char(char_id)
    char = char[0]
    await state.update_data({"char": char})
    await state.set_state(Form.ammunition_item_menu)
    await message.answer(text=character_card(char)["ammunition"][item_id], reply_markup=item_keyboard, parse_mode="MarkdownV2")

@router.callback_query(Form.experience_menu)
async def experience_menu(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–ø—ã—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await callback_query.answer()
    char = await state.get_data()
    char = char["char"]
    if callback_query.data == 'back':
        await callback_query.message.edit_text(text='üéí *_–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:_*', reply_markup=inventory_keyboard,parse_mode="MarkdownV2")
        await state.set_state(Form.inventory_menu)
    else:
        await callback_query.message.edit_text(text=f'*_–¢–µ–∫—É—â–∏–π –æ–ø—ã—Ç:_* {char['experience']}\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞\, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å/—É–±—Ä–∞—Ç—å\. –ù–∞–ø—Ä–∏–º–µ—Ä `+12` –∏–ª–∏ `-3`\.',parse_mode="MarkdownV2")
        await state.set_state(Form.change_xp)

@router.message(Form.change_xp)
async def change_xp(message: types.Message, state: FSMContext):
    """–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    char = await state.get_data()
    char = char["char"]
    char_id = char["id"]
    data = message.text
    if check_int(data):
        if char['experience'] + int(data) < 0:
            await message.answer(text="–£ –≤–∞—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞.")
        else:
            await update_experience(char_id, data)
            char['experience'] += int(data)
            await state.update_data({"char": char})
            await message.answer(text=f'*_–¢–µ–∫—É—â–∏–π –æ–ø—ã—Ç:_* {char["experience"]}', reply_markup=edit_keyboard,parse_mode="MarkdownV2")
            await state.set_state(Form.experience_menu)
    else:
        await message.answer(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞.")

@router.callback_query(Form.regenerate_char)
async def regenerate_char(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await callback_query.answer()
    char = await state.get_data()
    char = char["char"]
    data = await state.get_data()
    char_id = data["char"]["id"]
    if callback_query.data == "yes":
        response = await auto_create_char({"gender": char["gender"], "race": char["race"], "character_class": char["character_class"]})
        response["user_id"] = str(callback_query.from_user.id)
        response["name"] = char["name"]
        response["surname"] = char["surname"]
        char = await update_char(response, char_id)
        await state.update_data({"char": char})
        await callback_query.message.edit_text(text=character_card(char)["main_char_info"],parse_mode="MarkdownV2",reply_markup=character_card_keyboard)
        await state.set_state(Form.character_card)
    else:
        await callback_query.message.edit_text(text=character_card(char)["main_char_info"],parse_mode="MarkdownV2",reply_markup=character_card_keyboard)
        await state.set_state(Form.character_card)

@router.callback_query(Form.delete_character_confirm)
async def delete_character_confirm(callback_query: types.CallbackQuery, state: FSMContext):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await callback_query.answer()
    char = await state.get_data()
    char = char["char"]
    if callback_query.data == "yes":
        await delete_char(char["id"])
        await state.clear()
        await callback_query.message.edit_media(media=InputMediaPhoto(media=FSInputFile("assets/characters.png")), reply_markup=characters_keyboard)
        await callback_query.message.edit_caption(caption="–í—ã –∂–µ—Å—Ç–æ–∫–æ —É–¥–∞–ª–∏–ª–∏ –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!", reply_markup=characters_keyboard)
    if callback_query.data == "no":
        await callback_query.message.edit_text(parse_mode="MarkdownV2",text=f"{character_card(char["main_char_info"])}\n\n–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞",reply_markup=character_card_keyboard)

@router.callback_query(lambda c: c.data == 'back')
async def get_back(callback_query: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await callback_query.answer()
    await callback_query.message.delete()
    await state.set_state(Form.view_character)

@router.callback_query(lambda c: c.data == 'create_character')
async def choose_creation(callback_query: types.CallbackQuery,state: FSMContext):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º –∫–ª–∞—Å—Å–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await callback_query.answer()
    await callback_query.message.edit_media(media=InputMediaPhoto(media=FSInputFile("assets/char_create.png")))
    await callback_query.message.edit_caption(caption="–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ç—Ä–∏ –≤–æ–ø—Ä–æ—Å–∞, –∞ –º—ã –∑–∞–ø–æ–ª–Ω–∏–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ! :)\n\n–í—ã–±–µ—Ä–µ—Ç–µ –∫–ª–∞—Å—Å –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",  reply_markup=classes_keyboard)
    await state.set_state(Form.auto_char_class)

@router.callback_query(Form.auto_char_class)
async def enter_char_class(callback_query: types.CallbackQuery, state: FSMContext):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º —Ä–∞—Å—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await callback_query.answer()
    if callback_query.data == 'char_back':
        await state.clear()
        await callback_query.message.edit_media(media=InputMediaPhoto(media=FSInputFile("assets/characters.png")), reply_markup=characters_keyboard)
    else:
        await state.update_data({"character_class": callback_query.data})
        await callback_query.message.edit_caption(caption="–í—ã–±–µ—Ä–µ—Ç–µ —Ä–∞—Å—É –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",reply_markup=races_keyboard)
        await state.set_state(Form.auto_char_race)

@router.callback_query(Form.auto_char_race)
async def enter_char_race(callback_query: types.CallbackQuery, state: FSMContext):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º –ø–æ–ª–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await callback_query.answer()
    if callback_query.data == 'char_back':
        await callback_query.message.edit_caption(caption="–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ç—Ä–∏ –≤–æ–ø—Ä–æ—Å–∞, –∞ –º—ã –∑–∞–ø–æ–ª–Ω–∏–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ! :)\n\n–í—ã–±–µ—Ä–µ—Ç–µ –∫–ª–∞—Å—Å –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",  reply_markup=classes_keyboard)
        await state.set_state(Form.auto_char_class)
    else:
        await state.update_data({"race": callback_query.data})
        await callback_query.message.edit_caption(caption="–í—ã–±–µ—Ä–µ—Ç–µ –ø–æ–ª –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",reply_markup=gender_keyboard)
        await state.set_state(Form.auto_char_gender)

@router.callback_query(Form.auto_char_gender)
async def enter_char_gender(callback_query: types.CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await callback_query.answer()
    if callback_query.data == 'char_back':
        await callback_query.message.edit_caption(caption="–í—ã–±–µ—Ä–µ—Ç–µ —Ä–∞—Å—É –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",reply_markup=races_keyboard)
        await state.set_state(Form.auto_char_race)
    else:
        gender = callback_query.data
        await state.update_data({"gender": gender})
        data = await state.get_data()
        response = await auto_create_char({"gender": data["gender"], "race": data["race"], "character_class": data["character_class"]})
        response["user_id"] = str(callback_query.from_user.id)
        char  = await create_char(response)
        await callback_query.message.delete()
        await callback_query.message.answer(text=character_card(response)["main_char_info"],parse_mode="MarkdownV2",reply_markup=character_card_keyboard)
        await state.set_state(Form.character_card)
        await state.update_data({"char": char})
        await state.update_data({"base_char_info" : {"gender": data["gender"], "race": data["race"], "character_class": data["character_class"]}})
    
@router.callback_query(lambda c: c.data == 'discard_character')
async def discard_character(callback_query: types.CallbackQuery,state: FSMContext):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await callback_query.answer()
    await callback_query.message.edit_text(text="–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞?", reply_markup=yes_or_no_keyboard)
    await state.set_state(Form.discard_character)
    
@router.callback_query(Form.discard_character)
async def discard_character(callback_query: types.CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await callback_query.answer()
    if callback_query.data == 'yes':
        await callback_query.message.delete()
        await main_menu(callback_query.message,text="–í—ã –∂–µ—Å—Ç–æ–∫–æ —É–¥–∞–ª–∏–ª–∏ –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!")
    else:
        char = await state.get_data()
        base_info = char["base_char_info"]
        char = char["char"]
        await state.update_data({"base_char_info" : base_info})
        await state.update_data({"char" : char})
        await callback_query.message.delete()
        await callback_query.message.answer(text=f"{character_card(char)["main_char_info"]}\n\n–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞",reply_markup=character_card_keyboard,parse_mode="MarkdownV2")
